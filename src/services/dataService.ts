
import { supabase } from '@/integrations/supabase/client';
import { DemoDataService } from './demoDataService';
import { Repairer } from '@/types/repairer';

/**
 * Service de donn√©es unifi√© qui g√®re automatiquement le mode d√©mo
 */
export class DataService {
  /**
   * V√©rifie si le mode d√©mo est activ√© pour l'utilisateur actuel
   */
  static async isDemoModeEnabled(): Promise<boolean> {
    try {
      const { data: flags } = await supabase
        .from('feature_flags_by_plan')
        .select('enabled')
        .eq('feature_key', 'demo_mode_enabled')
        .eq('plan_name', 'Enterprise')
        .single();

      const enabled = flags?.enabled || false;
      console.log('üéØ DataService - Mode d√©mo v√©rifi√©:', enabled);
      return enabled;
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification du mode d√©mo:', error);
      return false;
    }
  }

  /**
   * R√©cup√®re les r√©parateurs avec gestion automatique du mode d√©mo
   */
  static async getRepairers(): Promise<Repairer[]> {
    const demoModeEnabled = await this.isDemoModeEnabled();
    console.log('üîÑ DataService - R√©cup√©ration r√©parateurs, mode d√©mo:', demoModeEnabled);
    
    // R√©cup√©rer les donn√©es r√©elles
    const { data: realData, error } = await supabase
      .from('repairers')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      throw error;
    }

    console.log('üìä DataService - Donn√©es r√©elles r√©cup√©r√©es:', realData?.length || 0);

    // Transformer les donn√©es de la base pour correspondre au type Repairer
    const transformedRealData: Repairer[] = (realData || []).map(item => ({
      ...item,
      business_status: item.business_status || 'active',
      pappers_verified: item.pappers_verified || false,
      price_range: (['low', 'medium', 'high'].includes(item.price_range)) 
        ? item.price_range as 'low' | 'medium' | 'high'
        : 'medium',
      department: item.department || '',
      region: item.region || '',
      phone: item.phone || undefined,
      website: item.website || undefined,
      email: item.email || undefined,
      opening_hours: item.opening_hours ? 
        (typeof item.opening_hours === 'object' ? item.opening_hours as Record<string, string> : null) : 
        null,
      services: item.services || [],
      specialties: item.specialties || [],
      source: (['pages_jaunes', 'google_places', 'manual', 'demo'].includes(item.source)) 
        ? item.source as 'pages_jaunes' | 'google_places' | 'manual' | 'demo'
        : 'manual'
    }));

    // CORRECTION : Appliquer correctement la logique du mode d√©mo
    let result: Repairer[];
    
    if (demoModeEnabled) {
      // Mode d√©mo activ√© : donn√©es r√©elles (sans d√©mo) + donn√©es d√©mo
      const demoData = DemoDataService.getDemoRepairers();
      result = DemoDataService.combineWithDemoData(
        transformedRealData,
        demoData,
        true
      );
    } else {
      // Mode d√©mo d√©sactiv√© : UNIQUEMENT donn√©es r√©elles (filtrer toute donn√©e de d√©mo)
      result = transformedRealData.filter(item => item.source !== 'demo');
    }

    console.log('‚úÖ DataService - R√©sultat final:', result.length, 'r√©parateurs');
    return result;
  }

  /**
   * Filtre les donn√©es selon le mode d√©mo actuel
   */
  static async filterByDemoMode<T extends { source?: string }>(data: T[]): Promise<T[]> {
    const demoModeEnabled = await this.isDemoModeEnabled();
    console.log('üîç DataService - Filtrage par mode d√©mo:', demoModeEnabled);
    return DemoDataService.filterDataByDemoMode(data, demoModeEnabled);
  }
}
