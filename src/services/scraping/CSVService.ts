import Papa from 'papaparse';

interface RepairerData {
  name: string;
  address: string;
  city: string;
  postal_code: string;
  phone?: string;
  email?: string;
  website?: string;
  services: string[];
  specialties: string[];
  price_range: string;
}

export interface ImportResult {
  success: boolean;
  processed: number;
  skipped: number;
  errors: string[];
  data: any[];
}

export class CSVService {
  // Fonction pour corriger les caract√®res mal encod√©s
  static fixEncoding(text: string): string {
    if (!text || typeof text !== 'string') return text;
    
    // Dictionnaire des caract√®res mal encod√©s courants
    const encodingFixes: { [key: string]: string } = {
      '√É¬©': '√©',
      '√É¬®': '√®',
      '√É ': '√†',
      '√É¬ß': '√ß',
      '√É¬¥': '√¥',
      '√É¬π': '√π',
      '√É¬´': '√´',
      '√É¬Ø': '√Ø',
      '√É¬Æ': '√Æ',
      '√É¬¢': '√¢',
      '√É¬°': '√°',
      '√É¬≥': '√≥',
      '√É¬±': '√±',
      '√É': '√Ä',
      '√É‚Ä∞': '√â',
      '√É‚Ä°': '√á',
      '√É'': '√ë',
      '': '√©', // Caract√®re de remplacement g√©n√©rique
      'r√É¬©parateur': 'r√©parateur',
      'r√É¬©paration': 'r√©paration',
      't√É¬©l√É¬©phone': 't√©l√©phone',
      '√É¬©lectronique': '√©lectronique',
      'pr√É¬©cision': 'pr√©cision',
      'qualit√É¬©': 'qualit√©',
      'sp√É¬©cialit√É¬©': 'sp√©cialit√©',
      'exp√É¬©rience': 'exp√©rience'
    };

    let fixedText = text;
    
    // Remplacer tous les caract√®res mal encod√©s
    Object.keys(encodingFixes).forEach(badChar => {
      const regex = new RegExp(badChar, 'g');
      fixedText = fixedText.replace(regex, encodingFixes[badChar]);
    });

    return fixedText;
  }

  static async importFromFile(file: File): Promise<ImportResult> {
    console.log('üìÑ CSVService: D√©but du parsing du fichier:', file.name);
    
    return new Promise((resolve) => {
      const errors: string[] = [];
      let processed = 0;
      let skipped = 0;
      const validData: any[] = [];

      Papa.parse(file, {
        header: true,
        skipEmptyLines: true,
        encoding: 'UTF-8',
        complete: (results) => {
          console.log('üìä Papa Parse r√©sultats:', {
            data: results.data?.length || 0,
            errors: results.errors?.length || 0,
            meta: results.meta
          });

          if (results.errors && results.errors.length > 0) {
            console.log('‚ö†Ô∏è Erreurs Papa Parse:', results.errors);
            results.errors.forEach(error => {
              errors.push(`Erreur parsing: ${error.message} (ligne ${error.row})`);
            });
          }

          const rows = results.data as any[];
          console.log(`üîç Processing ${rows.length} lignes`);
          
          rows.forEach((row, index) => {
            console.log(`Ligne ${index + 1}:`, row);
            
            try {
              // Appliquer la correction d'encodage sur tous les champs texte
              const fixedRow = {
                ...row,
                name: row.name ? this.fixEncoding(row.name.toString()) : '',
                address: row.address ? this.fixEncoding(row.address.toString()) : '',
                city: row.city ? this.fixEncoding(row.city.toString()) : '',
                services: row.services ? this.fixEncoding(row.services.toString()) : '',
                specialties: row.specialties ? this.fixEncoding(row.specialties.toString()) : '',
                email: row.email ? this.fixEncoding(row.email.toString()) : '',
                website: row.website ? this.fixEncoding(row.website.toString()) : ''
              };

              // V√©rifier les champs obligatoires
              if (!fixedRow.name || fixedRow.name.trim().length === 0) {
                console.log(`‚ö†Ô∏è Ligne ${index + 1}: Nom manquant ou invalide`);
                skipped++;
                errors.push(`Ligne ${index + 1}: Le nom est obligatoire`);
                return;
              }

              if (!fixedRow.city || fixedRow.city.trim().length === 0) {
                console.log(`‚ö†Ô∏è Ligne ${index + 1}: Ville manquante ou invalide`);
                skipped++;
                errors.push(`Ligne ${index + 1}: La ville est obligatoire`);
                return;
              }
              
              // Nettoyer et valider les donn√©es
              const processedRow = {
                name: fixedRow.name.trim(),
                address: fixedRow.address.trim(),
                city: fixedRow.city.trim(),
                postal_code: row.postal_code ? row.postal_code.toString().trim() : '',
                phone: row.phone ? row.phone.toString().trim() : '',
                email: fixedRow.email.trim(),
                website: fixedRow.website.trim(),
                services: fixedRow.services ? fixedRow.services.split(',').map((s: string) => s.trim()).filter((s: string) => s.length > 0) : [],
                specialties: fixedRow.specialties ? fixedRow.specialties.split(',').map((s: string) => s.trim()).filter((s: string) => s.length > 0) : [],
                price_range: row.price_range && ['low', 'medium', 'high'].includes(row.price_range.toString().toLowerCase()) 
                  ? row.price_range.toString().toLowerCase() 
                  : 'medium',
                lat: row.lat ? parseFloat(row.lat.toString()) : null,
                lng: row.lng ? parseFloat(row.lng.toString()) : null
              };
              
              console.log(`‚úÖ Ligne ${index + 1} valid√©e et corrig√©e:`, processedRow);
              validData.push(processedRow);
              processed++;
              
            } catch (error) {
              console.error(`‚ùå Erreur ligne ${index + 1}:`, error);
              errors.push(`Ligne ${index + 1}: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
              skipped++;
            }
          });

          const result = {
            success: errors.length === 0 || processed > 0,
            processed,
            skipped,
            errors,
            data: validData
          };

          console.log('üìä R√©sultat final CSVService:', result);
          resolve(result);
        },
        error: (error) => {
          console.error('üí• Erreur Papa Parse:', error);
          resolve({
            success: false,
            processed: 0,
            skipped: 0,
            errors: [`Erreur de lecture du fichier: ${error.message}`],
            data: []
          });
        }
      });
    });
  }

  static exportToCSV(data: RepairerData[], filename: string) {
    console.log('üì§ Export CSV:', { data: data.length, filename });
    
    // Transformer les donn√©es pour l'export (tableaux en cha√Ænes)
    const exportData = data.map(item => ({
      ...item,
      services: Array.isArray(item.services) ? item.services.join(',') : item.services,
      specialties: Array.isArray(item.specialties) ? item.specialties.join(',') : item.specialties
    }));
    
    const csv = Papa.unparse(exportData);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  }

  static generateTemplate() {
    console.log('üìã G√©n√©ration du template CSV');
    
    const template = [
      {
        name: 'R√©parateur Mobile Pro',
        address: '123 Rue de la R√©publique',
        city: 'Paris',
        postal_code: '75001',
        phone: '01 23 45 67 89',
        email: 'contact@reparateur-pro.fr',
        website: 'www.reparateur-pro.fr',
        services: ['R√©paration t√©l√©phone', 'R√©paration tablette', 'Changement √©cran'],
        specialties: ['iPhone', 'Samsung', 'Huawei', 'OnePlus'],
        price_range: 'medium'
      },
      {
        name: 'iTech R√©paration',
        address: '456 Avenue des Champs',
        city: 'Lyon',
        postal_code: '69001',
        phone: '04 78 12 34 56',
        email: 'info@itech-reparation.com',
        website: 'www.itech-reparation.com',
        services: ['R√©paration smartphone', 'D√©blocage t√©l√©phone', 'R√©cup√©ration donn√©es'],
        specialties: ['Apple', 'Android', '√âcrans OLED'],
        price_range: 'high'
      }
    ];

    this.exportToCSV(template, 'modele_repairers.csv');
    console.log('‚úÖ Template CSV g√©n√©r√© et t√©l√©charg√©');
  }
}
