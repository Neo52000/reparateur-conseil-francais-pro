import { supabase } from '@/integrations/supabase/client';

export interface AIInsight {
  id: string;
  type: 'opportunity' | 'optimization' | 'alert' | 'recommendation';
  priority: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  description: string;
  impact: string;
  confidence: number;
  actionable: boolean;
  action?: {
    type: string;
    label: string;
    data: any;
  };
  metadata?: any;
  created_at: string;
}

export interface PerformanceMetrics {
  impressions: number;
  clicks: number;
  conversions: number;
  cost: number;
  revenue: number;
  ctr: number;
  conversionRate: number;
  roi: number;
  trend: 'up' | 'down' | 'stable';
  changePercent: number;
}

export interface CampaignInsight {
  campaign_id: string;
  campaign_name: string;
  performance: PerformanceMetrics;
  insights: AIInsight[];
  predictions: {
    nextWeekPerformance: PerformanceMetrics;
    budgetRecommendation: number;
    optimalBidding: number;
  };
}

class AIInsightsService {
  private static instance: AIInsightsService;

  static getInstance(): AIInsightsService {
    if (!this.instance) {
      this.instance = new AIInsightsService();
    }
    return this.instance;
  }

  // V√©rifie si le mode d√©mo est activ√©
  private async isDemoModeEnabled(): Promise<boolean> {
    try {
      const { data: flags } = await supabase
        .from('feature_flags_by_plan')
        .select('enabled')
        .eq('feature_key', 'demo_mode_enabled')
        .eq('plan_name', 'Enterprise')
        .single();

      const enabled = flags?.enabled || false;
      console.log('üéØ AIInsightsService - Mode d√©mo v√©rifi√©:', enabled);
      return enabled;
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification du mode d√©mo:', error);
      return false;
    }
  }

  // G√©n√®re des insights IA bas√©s sur les donn√©es r√©elles OU de d√©mo
  async generateInsights(): Promise<AIInsight[]> {
    const demoModeEnabled = await this.isDemoModeEnabled();
    console.log('üîÑ AIInsightsService - G√©n√©ration insights, mode d√©mo:', demoModeEnabled);

    if (demoModeEnabled) {
      return this.generateDemoInsights();
    } else {
      return this.generateRealInsights();
    }
  }

  // G√©n√®re des insights bas√©s sur de vraies donn√©es
  private async generateRealInsights(): Promise<AIInsight[]> {
    try {
      console.log('üìä AIInsightsService - G√©n√©ration insights r√©els');
      
      // R√©cup√©rer les donn√©es de performance r√©centes depuis la base
      const { data: campaigns } = await supabase
        .from('ad_campaigns')
        .select('*')
        .eq('status', 'active');

      const insights: AIInsight[] = [];

      // Si pas de campagnes actives, retourner des suggestions de base
      if (!campaigns || campaigns.length === 0) {
        insights.push({
          id: `no_campaigns_${Date.now()}`,
          type: 'recommendation',
          priority: 'medium',
          title: 'Aucune campagne active d√©tect√©e',
          description: 'Cr√©ez votre premi√®re campagne publicitaire pour commencer √† g√©n√©rer des leads',
          impact: 'Commencer √† attirer des clients potentiels',
          confidence: 100,
          actionable: true,
          action: {
            type: 'create_campaign',
            label: 'Cr√©er une campagne',
            data: { action: 'redirect_to_campaigns' }
          },
          created_at: new Date().toISOString()
        });
        return insights;
      }

      // Analyser chaque campagne pour g√©n√©rer des insights r√©els
      for (const campaign of campaigns) {
        const campaignInsights = await this.analyzeRealCampaignPerformance(campaign);
        insights.push(...campaignInsights);
      }

      // Ajouter des insights g√©n√©raux bas√©s sur les vraies donn√©es
      const generalInsights = await this.generateRealGeneralInsights();
      insights.push(...generalInsights);

      return insights.sort((a, b) => this.getPriorityScore(b.priority) - this.getPriorityScore(a.priority));
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration d\'insights r√©els:', error);
      return [];
    }
  }

  // G√©n√®re des insights de d√©monstration
  private generateDemoInsights(): AIInsight[] {
    console.log('üé≠ AIInsightsService - G√©n√©ration insights de d√©monstration');
    
    return [
      {
        id: `demo_opportunity_${Date.now()}`,
        type: 'opportunity',
        priority: 'high',
        title: 'Campagne Lyon surperforme (D√©mo)',
        description: 'ROI de 285% avec une tendance positive de +15% cette semaine',
        impact: 'Augmenter le budget pourrait g√©n√©rer +1,200‚Ç¨ de revenus suppl√©mentaires',
        confidence: 94,
        actionable: true,
        action: {
          type: 'increase_budget',
          label: 'Augmenter le budget de 25%',
          data: { campaign: 'lyon_demo', increase_percent: 25 }
        },
        created_at: new Date().toISOString()
      },
      {
        id: `demo_alert_${Date.now()}`,
        type: 'alert',
        priority: 'medium',
        title: 'CTR en baisse sur mobiles (D√©mo)',
        description: 'CTR mobile de 2.1% contre 3.8% sur desktop',
        impact: 'Optimiser pour mobile pourrait r√©cup√©rer 300 clics/semaine',
        confidence: 87,
        actionable: true,
        action: {
          type: 'optimize_mobile',
          label: 'Optimiser cr√©atifs mobiles',
          data: { focus: 'mobile_optimization' }
        },
        created_at: new Date().toISOString()
      },
      {
        id: `demo_recommendation_${Date.now()}`,
        type: 'recommendation',
        priority: 'high',
        title: 'Nouveau segment haute performance (D√©mo)',
        description: 'iOS Premium 25-35 ans Paris : taux de conversion 8.2%',
        impact: 'Potentiel de +2,400‚Ç¨/mois en ciblant ce segment',
        confidence: 91,
        actionable: true,
        action: {
          type: 'create_lookalike',
          label: 'Cr√©er audience similaire',
          data: { segment: 'ios_premium_paris_25_35' }
        },
        created_at: new Date().toISOString()
      },
      {
        id: `demo_optimization_${Date.now()}`,
        type: 'optimization',
        priority: 'medium',
        title: 'Heures optimales d√©tect√©es (D√©mo)',
        description: 'Mardis 14h-16h : CPA 40% plus bas que la moyenne',
        impact: 'R√©allocation horaire pourrait r√©duire les co√ªts de 18%',
        confidence: 89,
        actionable: true,
        action: {
          type: 'schedule_optimization',
          label: 'Ajuster la programmation',
          data: { optimal_hours: 'tuesday_14_16' }
        },
        created_at: new Date().toISOString()
      },
      {
        id: `demo_seasonal_${Date.now()}`,
        type: 'recommendation',
        priority: 'critical',
        title: 'Pic saisonnier imminent (D√©mo)',
        description: 'Historiquement +67% de demandes la semaine prochaine',
        impact: 'Pr√©paration n√©cessaire pour capturer 40% de trafic suppl√©mentaire',
        confidence: 96,
        actionable: true,
        action: {
          type: 'prepare_seasonal',
          label: 'Pr√©parer campagne saisonni√®re',
          data: { season: 'peak_week', traffic_increase: 67 }
        },
        created_at: new Date().toISOString()
      }
    ];
  }

  // Analyse les performances r√©elles d'une campagne
  private async analyzeRealCampaignPerformance(campaign: any): Promise<AIInsight[]> {
    const insights: AIInsight[] = [];
    
    // R√©cup√©rer les m√©triques r√©elles de performance
    const { data: impressions } = await supabase
      .from('ad_impressions')
      .select('id')
      .eq('banner_id', campaign.id);

    const { data: clicks } = await supabase
      .from('ad_clicks')
      .select('id')
      .eq('banner_id', campaign.id);

    const impressionCount = impressions?.length || 0;
    const clickCount = clicks?.length || 0;
    const ctr = impressionCount > 0 ? (clickCount / impressionCount) * 100 : 0;

    // G√©n√©rer des insights bas√©s sur les vraies m√©triques
    if (ctr < 1.0 && impressionCount > 100) {
      insights.push({
        id: `real_low_ctr_${campaign.id}`,
        type: 'alert',
        priority: 'medium',
        title: `CTR faible pour ${campaign.name}`,
        description: `CTR de ${ctr.toFixed(2)}% sur ${impressionCount} impressions`,
        impact: 'Optimiser les cr√©atifs pour am√©liorer l\'engagement',
        confidence: 85,
        actionable: true,
        action: {
          type: 'optimize_creative',
          label: 'Revoir les cr√©atifs',
          data: { campaign_id: campaign.id }
        },
        created_at: new Date().toISOString()
      });
    }

    if (ctr > 3.0 && impressionCount > 50) {
      insights.push({
        id: `real_high_performance_${campaign.id}`,
        type: 'opportunity',
        priority: 'high',
        title: `Excellente performance : ${campaign.name}`,
        description: `CTR de ${ctr.toFixed(2)}% - bien au-dessus de la moyenne`,
        impact: 'Consid√©rer augmenter le budget pour cette campagne performante',
        confidence: 92,
        actionable: true,
        action: {
          type: 'scale_budget',
          label: 'Augmenter le budget',
          data: { campaign_id: campaign.id, suggested_increase: 50 }
        },
        created_at: new Date().toISOString()
      });
    }

    return insights;
  }

  // G√©n√®re des insights g√©n√©raux bas√©s sur les vraies donn√©es
  private async generateRealGeneralInsights(): Promise<AIInsight[]> {
    const insights: AIInsight[] = [];

    // Analyser les tendances g√©n√©rales dans la base de donn√©es
    const { data: recentClicks } = await supabase
      .from('ad_clicks')
      .select('created_at, placement')
      .gte('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (recentClicks && recentClicks.length > 0) {
      // Analyser les placements les plus performants
      const placementStats: { [key: string]: number } = {};
      recentClicks.forEach(click => {
        placementStats[click.placement] = (placementStats[click.placement] || 0) + 1;
      });

      const topPlacement = Object.entries(placementStats)
        .sort(([,a], [,b]) => b - a)[0];

      if (topPlacement) {
        insights.push({
          id: `real_top_placement_${Date.now()}`,
          type: 'recommendation',
          priority: 'medium',
          title: `Placement performant identifi√©`,
          description: `${topPlacement[0]} g√©n√®re ${topPlacement[1]} clics cette semaine`,
          impact: 'Concentrer plus de budget sur ce placement pourrait am√©liorer les r√©sultats',
          confidence: 78,
          actionable: true,
          action: {
            type: 'optimize_placement',
            label: 'Optimiser ce placement',
            data: { placement: topPlacement[0], clicks: topPlacement[1] }
          },
          created_at: new Date().toISOString()
        });
      }
    }

    // Si peu de donn√©es, sugg√©rer des am√©liorations de base
    if (!recentClicks || recentClicks.length < 10) {
      insights.push({
        id: `real_low_activity_${Date.now()}`,
        type: 'recommendation',
        priority: 'high',
        title: 'Activit√© publicitaire faible d√©tect√©e',
        description: 'Moins de 10 interactions cette semaine',
        impact: 'Augmenter la visibilit√© pour g√©n√©rer plus d\'engagement',
        confidence: 90,
        actionable: true,
        action: {
          type: 'increase_visibility',
          label: 'Booster la visibilit√©',
          data: { suggestion: 'increase_budget_or_targeting' }
        },
        created_at: new Date().toISOString()
      });
    }

    return insights;
  }

  async generateRecommendations(userId?: string): Promise<AIInsight[]> {
    const demoModeEnabled = await this.isDemoModeEnabled();
    
    if (demoModeEnabled) {
      return this.generateDemoRecommendations();
    } else {
      return this.generateRealRecommendations(userId);
    }
  }

  private generateDemoRecommendations(): AIInsight[] {
    return [
      {
        id: `demo_rec_budget_${Date.now()}`,
        type: 'recommendation',
        priority: 'medium',
        title: 'Optimisation budg√©taire intelligente (D√©mo)',
        description: 'Redistribuer 15% du budget des campagnes sous-performantes vers les leaders',
        impact: 'ROI global estim√©: +47%',
        confidence: 91,
        actionable: true,
        action: {
          type: 'rebalance_budget',
          label: 'Appliquer la redistribution',
          data: { optimization_type: 'performance_based' }
        },
        created_at: new Date().toISOString()
      },
      {
        id: `demo_rec_targeting_${Date.now()}`,
        type: 'optimization',
        priority: 'high',
        title: 'Nouveau segment haute performance identifi√© (D√©mo)',
        description: 'Clients Premium 25-35 ans √† Lyon montrent un taux de conversion de 8.2%',
        impact: 'Potentiel de revenus additionnels: +2,400‚Ç¨/mois',
        confidence: 94,
        actionable: true,
        action: {
          type: 'create_lookalike_audience',
          label: 'Cr√©er une audience similaire',
          data: { base_segment: 'premium_lyon_25_35', expansion_rate: 5 }
        },
        created_at: new Date().toISOString()
      }
    ];
  }

  private async generateRealRecommendations(userId?: string): Promise<AIInsight[]> {
    const recommendations: AIInsight[] = [];

    // G√©n√©rer des recommandations bas√©es sur les vraies donn√©es utilisateur
    try {
      const { data: userCampaigns } = await supabase
        .from('ad_campaigns')
        .select('*')
        .eq('created_by', userId);

      if (!userCampaigns || userCampaigns.length === 0) {
        recommendations.push({
          id: `real_first_campaign_${Date.now()}`,
          type: 'recommendation',
          priority: 'high',
          title: 'Cr√©ez votre premi√®re campagne',
          description: 'Commencez par une campagne cibl√©e pour tester vos audiences',
          impact: 'D√©marrer la g√©n√©ration de leads qualifi√©s',
          confidence: 100,
          actionable: true,
          action: {
            type: 'create_first_campaign',
            label: 'Cr√©er ma premi√®re campagne',
            data: { template: 'beginner_friendly' }
          },
          created_at: new Date().toISOString()
        });
      } else {
        // Recommandations bas√©es sur les campagnes existantes
        recommendations.push({
          id: `real_campaign_optimization_${Date.now()}`,
          type: 'optimization',
          priority: 'medium',
          title: 'Optimisation de vos campagnes existantes',
          description: `Analysez les performances de vos ${userCampaigns.length} campagnes actives`,
          impact: 'Am√©liorer le ROI de vos campagnes actuelles',
          confidence: 85,
          actionable: true,
          action: {
            type: 'analyze_campaigns',
            label: 'Analyser les performances',
            data: { campaign_count: userCampaigns.length }
          },
          created_at: new Date().toISOString()
        });
      }
    } catch (error) {
      console.error('Erreur g√©n√©ration recommandations r√©elles:', error);
    }

    return recommendations;
  }

  async generatePredictions(campaignId: string): Promise<any> {
    const demoModeEnabled = await this.isDemoModeEnabled();
    
    if (demoModeEnabled) {
      return this.generateDemoPredictions();
    } else {
      return this.generateRealPredictions(campaignId);
    }
  }

  private generateDemoPredictions(): any {
    return {
      nextWeekPerformance: {
        impressions: 15000,
        clicks: 450,
        conversions: 38,
        predictedRoi: 275
      },
      budgetOptimization: {
        recommendedBudget: 1200,
        expectedRoi: 280,
        confidenceLevel: 87
      }
    };
  }

  private async generateRealPredictions(campaignId: string): Promise<any> {
    // R√©cup√©rer les donn√©es historiques de la campagne
    const { data: historicalData } = await supabase
      .from('ad_impressions')
      .select('created_at')
      .eq('banner_id', campaignId)
      .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString());

    const baseMetrics = historicalData?.length || 0;
    
    return {
      nextWeekPerformance: {
        impressions: Math.max(baseMetrics * 1.1, 100),
        clicks: Math.max(Math.floor(baseMetrics * 0.03), 5),
        conversions: Math.max(Math.floor(baseMetrics * 0.005), 1),
        predictedRoi: baseMetrics > 0 ? 150 + Math.random() * 100 : 120
      },
      budgetOptimization: {
        recommendedBudget: Math.max(baseMetrics * 0.5, 200),
        expectedRoi: 180 + Math.random() * 50,
        confidenceLevel: baseMetrics > 100 ? 85 : 60
      }
    };
  }

  private getPriorityScore(priority: string): number {
    switch (priority) {
      case 'critical': return 4;
      case 'high': return 3;
      case 'medium': return 2;
      case 'low': return 1;
      default: return 0;
    }
  }
}

export default AIInsightsService;
