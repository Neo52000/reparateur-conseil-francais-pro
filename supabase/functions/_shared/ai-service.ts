// Service centralis√© pour les APIs IA avec syst√®me de fallback intelligent

interface AIServiceConfig {
  deepseekApiKey?: string;
  mistralApiKey?: string;
  openaiApiKey?: string;
}

interface ClassificationResult {
  success: boolean;
  data: any;
  confidence: number;
  model_used: string;
  error?: string;
}

interface EnhancementResult {
  success: boolean;
  enhanced_description?: string;
  data: any;
  model_used: string;
  error?: string;
}

export class AIService {
  private config: AIServiceConfig;
  private fallbackLogs: string[] = [];

  constructor(config: AIServiceConfig) {
    this.config = config;
  }

  // Classification avec fallback intelligent : DeepSeek ‚Üí OpenAI ‚Üí R√®gles basiques
  async classifyRepairer(repairer: any): Promise<ClassificationResult> {
    const startTime = Date.now();
    this.fallbackLogs = [];

    // Tentative 1: DeepSeek
    if (this.config.deepseekApiKey) {
      try {
        console.log('üîÑ [AI-Service] Tentative classification DeepSeek...');
        const result = await this.classifyWithDeepSeek(repairer);
        console.log(`‚úÖ [AI-Service] DeepSeek r√©ussi (${Date.now() - startTime}ms)`);
        return { ...result, model_used: 'deepseek-chat' };
      } catch (error) {
        this.fallbackLogs.push(`DeepSeek √©chou√©: ${error.message}`);
        console.warn(`‚ö†Ô∏è [AI-Service] DeepSeek √©chou√©, fallback vers OpenAI: ${error.message}`);
      }
    }

    // Tentative 2: OpenAI (fallback)
    if (this.config.openaiApiKey) {
      try {
        console.log('üîÑ [AI-Service] Fallback vers OpenAI pour classification...');
        const result = await this.classifyWithOpenAI(repairer);
        console.log(`‚úÖ [AI-Service] OpenAI r√©ussi (${Date.now() - startTime}ms)`);
        return { ...result, model_used: 'gpt-4o-mini' };
      } catch (error) {
        this.fallbackLogs.push(`OpenAI √©chou√©: ${error.message}`);
        console.warn(`‚ö†Ô∏è [AI-Service] OpenAI √©chou√©, fallback vers r√®gles basiques: ${error.message}`);
      }
    }

    // Tentative 3: R√®gles basiques (fallback final)
    console.log('üîÑ [AI-Service] Fallback vers classification basique...');
    const basicResult = this.classifyWithBasicRules(repairer);
    console.log(`‚úÖ [AI-Service] Classification basique termin√©e (${Date.now() - startTime}ms)`);
    
    return {
      ...basicResult,
      model_used: 'basic_rules',
      error: `Tous les mod√®les IA ont √©chou√©: ${this.fallbackLogs.join('; ')}`
    };
  }

  // Am√©lioration avec fallback : Mistral ‚Üí OpenAI ‚Üí Description basique
  async enhanceDescription(repairer: any): Promise<EnhancementResult> {
    const startTime = Date.now();
    this.fallbackLogs = [];

    // Tentative 1: Mistral
    if (this.config.mistralApiKey) {
      try {
        console.log('üîÑ [AI-Service] Tentative am√©lioration Mistral...');
        const result = await this.enhanceWithMistral(repairer);
        console.log(`‚úÖ [AI-Service] Mistral r√©ussi (${Date.now() - startTime}ms)`);
        return { ...result, model_used: 'mistral-large-latest' };
      } catch (error) {
        this.fallbackLogs.push(`Mistral √©chou√©: ${error.message}`);
        console.warn(`‚ö†Ô∏è [AI-Service] Mistral √©chou√©, fallback vers OpenAI: ${error.message}`);
      }
    }

    // Tentative 2: OpenAI (fallback)
    if (this.config.openaiApiKey) {
      try {
        console.log('üîÑ [AI-Service] Fallback vers OpenAI pour am√©lioration...');
        const result = await this.enhanceWithOpenAI(repairer);
        console.log(`‚úÖ [AI-Service] OpenAI r√©ussi (${Date.now() - startTime}ms)`);
        return { ...result, model_used: 'gpt-4o-mini' };
      } catch (error) {
        this.fallbackLogs.push(`OpenAI √©chou√©: ${error.message}`);
        console.warn(`‚ö†Ô∏è [AI-Service] OpenAI √©chou√©, fallback vers am√©lioration basique: ${error.message}`);
      }
    }

    // Tentative 3: Am√©lioration basique (fallback final)
    console.log('üîÑ [AI-Service] Fallback vers am√©lioration basique...');
    const basicResult = this.enhanceWithBasicRules(repairer);
    console.log(`‚úÖ [AI-Service] Am√©lioration basique termin√©e (${Date.now() - startTime}ms)`);
    
    return {
      ...basicResult,
      model_used: 'basic_rules',
      error: `Tous les mod√®les IA ont √©chou√©: ${this.fallbackLogs.join('; ')}`
    };
  }

  // M√©thodes priv√©es pour chaque API
  private async classifyWithDeepSeek(repairer: any): Promise<ClassificationResult> {
    const prompt = `Analyse ce commerce pour d√©terminer s'il s'agit d'un r√©parateur de t√©l√©phones/smartphones:

Nom: ${repairer.name}
Adresse: ${repairer.address}
Description: ${repairer.description || 'Non renseign√©e'}

R√©ponds en JSON avec:
{
  "is_repairer": boolean,
  "confidence": number (0-1),
  "specialties": string[],
  "services": string[],
  "reasoning": string
}`;

    const response = await fetch('https://api.deepseek.com/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.config.deepseekApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          { role: 'system', content: 'Tu es un expert en classification de commerces. R√©ponds uniquement en JSON valide.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.1,
        max_tokens: 500
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`DeepSeek API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('R√©ponse vide de DeepSeek');
    }

    try {
      const parsed = JSON.parse(content);
      return {
        success: true,
        data: parsed,
        confidence: parsed.confidence || 0
      };
    } catch (error) {
      throw new Error(`Erreur parsing JSON DeepSeek: ${error.message}`);
    }
  }

  private async classifyWithOpenAI(repairer: any): Promise<ClassificationResult> {
    const prompt = `Analyze this business to determine if it's a phone/smartphone repair shop:

Name: ${repairer.name}
Address: ${repairer.address}
Description: ${repairer.description || 'No description'}

Respond in JSON format:
{
  "is_repairer": boolean,
  "confidence": number (0-1),
  "specialties": string[],
  "services": string[],
  "reasoning": string
}`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.config.openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: 'You are an expert in business classification. Respond only with valid JSON.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.1,
        max_tokens: 500
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('R√©ponse vide d\'OpenAI');
    }

    try {
      const parsed = JSON.parse(content);
      return {
        success: true,
        data: parsed,
        confidence: parsed.confidence || 0
      };
    } catch (error) {
      throw new Error(`Erreur parsing JSON OpenAI: ${error.message}`);
    }
  }

  private classifyWithBasicRules(repairer: any): ClassificationResult {
    const name = repairer.name?.toLowerCase() || '';
    const description = repairer.description?.toLowerCase() || '';
    const combined = `${name} ${description}`;

    // Mots-cl√©s positifs pour r√©parateurs de t√©l√©phones
    const repairKeywords = [
      'r√©paration', 'repair', 't√©l√©phone', 'smartphone', 'mobile', 'iphone', 'samsung',
      '√©cran', 'batterie', 'vitre', 'phone', 'gsm', 'portable', 'tablette', 'tablet'
    ];

    // Mots-cl√©s n√©gatifs
    const excludeKeywords = [
      'vente', 'magasin', 'boutique', 'accessoire', 'coiffure', 'restaurant', 'boulangerie'
    ];

    let score = 0;
    let matchedKeywords: string[] = [];

    // Points positifs
    for (const keyword of repairKeywords) {
      if (combined.includes(keyword)) {
        score += 1;
        matchedKeywords.push(keyword);
      }
    }

    // Points n√©gatifs
    for (const keyword of excludeKeywords) {
      if (combined.includes(keyword)) {
        score -= 2;
      }
    }

    const confidence = Math.max(0, Math.min(1, score / 3));
    const isRepairer = confidence > 0.3;

    return {
      success: true,
      data: {
        is_repairer: isRepairer,
        confidence: confidence,
        specialties: matchedKeywords,
        services: isRepairer ? ['R√©paration smartphone', 'R√©paration t√©l√©phone'] : [],
        reasoning: `Classification basique bas√©e sur ${matchedKeywords.length} mots-cl√©s d√©tect√©s`
      },
      confidence: confidence
    };
  }

  private async enhanceWithMistral(repairer: any): Promise<EnhancementResult> {
    const prompt = `Am√©liore la description de ce r√©parateur de t√©l√©phones en fran√ßais:

Nom: ${repairer.name}
Description actuelle: ${repairer.description || 'Aucune description'}

Cr√©e une description professionnelle, attrayante et SEO-optimis√©e d'environ 100-150 mots.
Mentionne les services de r√©paration de smartphones, tablettes, etc.

R√©ponds en JSON:
{
  "enhanced_description": string,
  "keywords": string[],
  "services_suggested": string[]
}`;

    const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.config.mistralApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'mistral-large-latest',
        messages: [
          { role: 'system', content: 'Tu es un expert en r√©daction commerciale pour les r√©parateurs de t√©l√©phones. R√©ponds uniquement en JSON valide.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 400
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Mistral API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('R√©ponse vide de Mistral');
    }

    try {
      const parsed = JSON.parse(content);
      return {
        success: true,
        data: parsed,
        enhanced_description: parsed.enhanced_description
      };
    } catch (error) {
      throw new Error(`Erreur parsing JSON Mistral: ${error.message}`);
    }
  }

  private async enhanceWithOpenAI(repairer: any): Promise<EnhancementResult> {
    const prompt = `Enhance the description for this phone repair shop in French:

Name: ${repairer.name}
Current description: ${repairer.description || 'No description'}

Create a professional, attractive, and SEO-optimized description of about 100-150 words.
Mention smartphone, tablet repair services, etc.

Respond in JSON:
{
  "enhanced_description": string,
  "keywords": string[],
  "services_suggested": string[]
}`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.config.openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: 'You are an expert in commercial writing for phone repair shops. Respond only with valid JSON in French.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 400
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('R√©ponse vide d\'OpenAI');
    }

    try {
      const parsed = JSON.parse(content);
      return {
        success: true,
        data: parsed,
        enhanced_description: parsed.enhanced_description
      };
    } catch (error) {  
      throw new Error(`Erreur parsing JSON OpenAI: ${error.message}`);
    }
  }

  private enhanceWithBasicRules(repairer: any): EnhancementResult {
    const name = repairer.name || 'Ce r√©parateur';
    const baseDescription = `${name} est un professionnel de la r√©paration de smartphones et t√©l√©phones mobiles. Sp√©cialis√© dans la r√©paration d'√©crans, remplacement de batteries, et d√©pannage technique pour toutes marques. Service rapide et qualit√© garantie pour vos appareils mobiles.`;

    return {
      success: true,
      data: {
        enhanced_description: baseDescription,
        keywords: ['r√©paration smartphone', 'r√©paration t√©l√©phone', '√©cran cass√©', 'batterie'],
        services_suggested: ['R√©paration √©cran', 'Changement batterie', 'D√©pannage mobile']
      },
      enhanced_description: baseDescription
    };
  }

  // Getter pour r√©cup√©rer les logs de fallback
  getFallbackLogs(): string[] {
    return [...this.fallbackLogs];
  }
}