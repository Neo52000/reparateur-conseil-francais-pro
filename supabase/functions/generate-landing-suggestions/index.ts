import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const mistralApiKey = Deno.env.get('MISTRAL_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // V√©rifier si la cl√© API Mistral est disponible
    if (!mistralApiKey) {
      console.error('‚ùå MISTRAL_API_KEY is not configured');
      return new Response(JSON.stringify({ 
        suggestions: [
          "Configurer la cl√© API Mistral dans les secrets du projet",
          "V√©rifier les param√®tres de l'API Mistral AI",
          "Contacter l'administrateur pour la configuration"
        ]
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }
    const { currentConfig, businessType, seoScore } = await req.json();

    const prompt = `Analyse cette landing page de ${businessType} et g√©n√®re des suggestions d'am√©lioration.
    
    Configuration actuelle: ${JSON.stringify(currentConfig)}
    Score SEO actuel: ${seoScore}/100
    
    G√©n√®re 3-5 suggestions concr√®tes et actionables pour am√©liorer:
    - La conversion (UX, CTA, contenu)
    - Le r√©f√©rencement SEO
    - L'engagement utilisateur
    - La cr√©dibilit√© et confiance
    
    Retourne un JSON avec un array "suggestions" contenant des phrases courtes et pratiques.
    Chaque suggestion doit √™tre sp√©cifique et applicable imm√©diatement.
    
    Exemple de format:
    {
      "suggestions": [
        "Ajouter des t√©moignages clients pour renforcer la cr√©dibilit√©",
        "Optimiser le titre principal avec des mots-cl√©s locaux",
        "Inclure un num√©ro de t√©l√©phone visible dans le header"
      ]
    }`;

    console.log('üîÑ Appel API Mistral pour suggestions');
    
    const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${mistralApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'mistral-large-latest',
        messages: [
          { 
            role: 'system', 
            content: 'Tu es un consultant expert en optimisation de landing pages et SEO sp√©cialis√© dans la r√©paration. Tu donnes des conseils pratiques et mesurables pour am√©liorer les performances. R√©ponds uniquement en JSON valide.'
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.6,
        max_tokens: 800
      }),
    });

    console.log('üì° Statut r√©ponse Mistral suggestions:', response.status);
    
    const data = await response.json();
    console.log('üì§ R√©ponse Mistral suggestions:', JSON.stringify(data, null, 2));
    
    if (!response.ok) {
      const errorMessage = data?.error?.message || data?.message || `Erreur HTTP ${response.status}`;
      console.error('‚ùå Erreur API Mistral suggestions:', errorMessage);
      throw new Error(errorMessage);
    }

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Structure de r√©ponse Mistral invalide pour suggestions');
    }

    let suggestions;
    try {
      const rawContent = data.choices[0].message.content;
      console.log('üìù Contenu brut suggestions:', rawContent);
      suggestions = JSON.parse(rawContent);
      console.log('‚úÖ Suggestions pars√©es:', suggestions);
    } catch (parseError) {
      console.error('‚ùå Erreur parsing suggestions:', parseError);
      // Fallback avec suggestions statiques
      suggestions = {
        suggestions: [
          "Am√©liorer le titre principal pour plus d'impact",
          "Ajouter des √©l√©ments de r√©assurance (certifications, garanties)",
          "Optimiser les call-to-action pour plus de visibilit√©",
          "Inclure des t√©moignages clients authentiques",
          "Am√©liorer la structure SEO avec des mots-cl√©s pertinents",
          "‚ö†Ô∏è Erreur parsing IA - Suggestions par d√©faut"
        ]
      };
    }

    return new Response(JSON.stringify(suggestions), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error: any) {
    console.error('‚ùå Erreur dans generate-landing-suggestions:', error);
    
    // Suggestions par d√©faut avec diagnostic d'erreur
    let defaultSuggestions = [
      "Optimiser le titre principal (30-60 caract√®res)",
      "Am√©liorer la description meta (120-160 caract√®res)",
      "Ajouter des mots-cl√©s pertinents",
      "Inclure des t√©moignages clients",
      "Optimiser les boutons d'appel √† l'action",
      "Am√©liorer la structure du contenu"
    ];
    
    if (error.message?.includes('401') || error.message?.includes('unauthorized')) {
      defaultSuggestions.unshift("‚ùå Cl√© API Mistral invalide - V√©rifiez la configuration dans les secrets");
    } else if (error.message?.includes('429')) {
      defaultSuggestions.unshift("‚è±Ô∏è Limite Mistral atteinte - R√©essayez dans quelques minutes");
    } else if (error.message?.includes('fetch')) {
      defaultSuggestions.unshift("üîó Erreur de connexion √† Mistral - V√©rifiez votre r√©seau");
    } else {
      defaultSuggestions.unshift("‚ö†Ô∏è Erreur g√©n√©ration IA - Suggestions par d√©faut affich√©es");
    }
    
    return new Response(JSON.stringify({
      suggestions: defaultSuggestions,
      error: error.message,
      fallback: true
    }), {
      status: 200, // Retourner du contenu par d√©faut m√™me en cas d'erreur
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});