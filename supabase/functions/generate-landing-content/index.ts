import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const mistralApiKey = Deno.env.get('MISTRAL_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üîë MISTRAL_API_KEY exists:', !!mistralApiKey);
    console.log('üîë MISTRAL_API_KEY length:', mistralApiKey ? mistralApiKey.length : 'undefined');
    
    // V√©rifier si la cl√© API Mistral est disponible
    if (!mistralApiKey) {
      console.error('‚ùå MISTRAL_API_KEY is not configured');
      return new Response(JSON.stringify({ 
        error: 'Cl√© API Mistral manquante. Veuillez configurer MISTRAL_API_KEY dans les secrets.' 
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }
    const { contentType, context, currentConfig, businessType } = await req.json();

    let prompt = '';
    
    switch (contentType) {
      case 'hero':
        prompt = `G√©n√®re le contenu pour la section hero d'une landing page de ${businessType}. 
        Contexte: ${context}
        Configuration actuelle: ${JSON.stringify(currentConfig.hero || {})}
        
        Retourne un JSON avec:
        - title: Un titre accrocheur et impactant (max 60 caract√®res)
        - subtitle: Un sous-titre qui explique la valeur ajout√©e (max 120 caract√®res)
        - cta_text: Un texte de bouton d'action incitant (max 20 caract√®res)
        
        Le contenu doit √™tre professionnel, orient√© conversion et adapt√© au secteur de la r√©paration.`;
        break;
        
      case 'about':
        prompt = `G√©n√®re le contenu pour la section "√Ä propos" d'une landing page de ${businessType}.
        Contexte: ${context}
        Configuration actuelle: ${JSON.stringify(currentConfig.about || {})}
        
        Retourne un JSON avec:
        - title: Un titre pour la section (max 40 caract√®res)
        - description: Une description engageante qui inspire confiance (200-300 mots)
        
        Mets l'accent sur l'expertise, la confiance, la proximit√© et la qualit√© du service.`;
        break;
        
      case 'services':
        prompt = `G√©n√®re le contenu pour la section services d'une landing page de ${businessType}.
        Contexte: ${context}
        Configuration actuelle: ${JSON.stringify(currentConfig.services || {})}
        
        Retourne un JSON avec:
        - title: Un titre pour la section services
        - items: Un array de 3-4 services avec pour chaque:
          - name: Nom du service (max 30 caract√®res)
          - description: Description courte et claire (max 80 caract√®res)
          - price: Fourchette de prix r√©aliste
        
        Les services doivent √™tre sp√©cifiques au secteur de la r√©paration et attractifs.`;
        break;
        
      case 'seo':
        prompt = `G√©n√®re les m√©tadonn√©es SEO optimis√©es pour une landing page de ${businessType}.
        Contexte: ${context}
        Configuration actuelle: ${JSON.stringify(currentConfig.seo || {})}
        Contenu de la page: ${JSON.stringify(currentConfig)}
        
        Retourne un JSON avec:
        - meta_title: Titre SEO optimis√© (50-60 caract√®res)
        - meta_description: Description SEO engageante (120-160 caract√®res)
        - keywords: 5-8 mots-cl√©s pertinents s√©par√©s par des virgules
        
        Utilise des mots-cl√©s locaux et sectoriels pour optimiser le r√©f√©rencement.`;
        break;
        
      default:
        throw new Error('Type de contenu non support√©');
    }

    console.log('üîÑ Appel API Mistral avec model: mistral-large-latest');
    
    const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${mistralApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'mistral-large-latest',
        messages: [
          { 
            role: 'system', 
            content: 'Tu es un expert en marketing digital et r√©daction web sp√©cialis√© dans le secteur de la r√©paration. Tu g√©n√®res du contenu professionnel, optimis√© pour la conversion et le SEO. R√©ponds uniquement en JSON valide.'
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 1000
      }),
    });

    console.log('üì° Statut r√©ponse Mistral:', response.status);
    
    const data = await response.json();
    console.log('üì§ R√©ponse Mistral:', JSON.stringify(data, null, 2));
    
    if (!response.ok) {
      const errorMessage = data?.error?.message || data?.message || `Erreur HTTP ${response.status}`;
      console.error('‚ùå Erreur API Mistral:', errorMessage);
      throw new Error(errorMessage);
    }

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Structure de r√©ponse Mistral invalide');
    }

    let content;
    try {
      const rawContent = data.choices[0].message.content;
      console.log('üìù Contenu brut Mistral:', rawContent);
      content = JSON.parse(rawContent);
      console.log('‚úÖ Contenu pars√© avec succ√®s:', content);
    } catch (parseError) {
      console.error('‚ùå Erreur parsing JSON:', parseError);
      throw new Error('Format de r√©ponse JSON invalide de Mistral');
    }

    return new Response(JSON.stringify({ content }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error: any) {
    console.error('‚ùå Erreur dans generate-landing-content:', error);
    
    let errorMessage = 'Erreur de g√©n√©ration de contenu';
    let statusCode = 500;
    
    if (error.message?.includes('401') || error.message?.includes('unauthorized')) {
      errorMessage = 'Cl√© API Mistral invalide ou expir√©e';
      statusCode = 401;
    } else if (error.message?.includes('429')) {
      errorMessage = 'Limite de requ√™tes Mistral d√©pass√©e - R√©essayez plus tard';
      statusCode = 429;
    } else if (error.message?.includes('fetch')) {
      errorMessage = 'Erreur de connexion √† l\'API Mistral';
      statusCode = 503;
    } else if (error.message?.includes('JSON')) {
      errorMessage = 'R√©ponse Mistral au format invalide';
      statusCode = 502;
    }
    
    return new Response(JSON.stringify({ 
      error: errorMessage,
      details: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: statusCode,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});